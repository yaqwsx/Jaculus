{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Jaculus The project source is located at https://github.com/yaqwsx/Jaculus . Start with building instructions and then proceed to uploading JS code .","title":"Welcome to Jaculus"},{"location":"#welcome-to-jaculus","text":"The project source is located at https://github.com/yaqwsx/Jaculus . Start with building instructions and then proceed to uploading JS code .","title":"Welcome to Jaculus"},{"location":"development/building-runtime/","text":"Building runtime In this document, we will guide you through the compilation of the Jaculus runtime \u2014 the firmware you flash into ESP32 to turn it into a powerful Jaculus device. Prerequisities Jaculus runtime is developed directly in ESP-IDF . Therefore, to build the runtime, you need to setup ESP-IDF development environment on your computer. Please follow the getting started guide for ESP-IDF . It will guide you through: toolchain installation, getting ESP-IDF, and setting up related tools. Once you have it, open a terminal in the runtime directory. A side note: the commands below assume ESP-IDF is installed in the default locations. If you changed them, you have to change the commands accordingly. First, you have to setup environmental variables into your terminal. This has to be done for every terminal window you open: Linux/MacOS: . $HOME/esp/esp-idf/export.sh Windows CMD: %userprofile%\\esp\\esp-idf\\export.bat Windows PowerShell: .$HOME/esp/esp-idf/export.ps1 Then you can build the firmware by invoking idf.py build . Note that the initial build might take a while and you need internet connection \u2014 several external dependencies are fetched during the initial build. Then you can upload the firmware into the microcontroller cia idf.py flash and open a serial terminal via idf.py monitor .","title":"Building runtime"},{"location":"development/building-runtime/#building-runtime","text":"In this document, we will guide you through the compilation of the Jaculus runtime \u2014 the firmware you flash into ESP32 to turn it into a powerful Jaculus device.","title":"Building runtime"},{"location":"development/building-runtime/#prerequisities","text":"Jaculus runtime is developed directly in ESP-IDF . Therefore, to build the runtime, you need to setup ESP-IDF development environment on your computer. Please follow the getting started guide for ESP-IDF . It will guide you through: toolchain installation, getting ESP-IDF, and setting up related tools. Once you have it, open a terminal in the runtime directory. A side note: the commands below assume ESP-IDF is installed in the default locations. If you changed them, you have to change the commands accordingly. First, you have to setup environmental variables into your terminal. This has to be done for every terminal window you open: Linux/MacOS: . $HOME/esp/esp-idf/export.sh Windows CMD: %userprofile%\\esp\\esp-idf\\export.bat Windows PowerShell: .$HOME/esp/esp-idf/export.ps1 Then you can build the firmware by invoking idf.py build . Note that the initial build might take a while and you need internet connection \u2014 several external dependencies are fetched during the initial build. Then you can upload the firmware into the microcontroller cia idf.py flash and open a serial terminal via idf.py monitor .","title":"Prerequisities"},{"location":"development/uploading-js-code/","text":"Uploading JS code Currently, there is a primitive tool in tools/transfer.py that allows you to manipulate with the internal memory for Javascript programs. If you ever struggle, just use tools/transfer.py --help . Uploading a program To upload a program invoke: tools/transfer.py sync --dir directoryWithTheProgram The tool should finish. Note that if you have concurrently opened idf.py monitor the procedure fails. Transpiling programs If you would like to test the programs that use the await and async keywords, you have to transpile the program. This is best done using regenerator . Usually you will invoke it as npx regenerator sourceDirectory buildDirectory . I will skip the installation procedure as soon it will not be needed and the power users don't need instructions :-P.","title":"Uploading JS code"},{"location":"development/uploading-js-code/#uploading-js-code","text":"Currently, there is a primitive tool in tools/transfer.py that allows you to manipulate with the internal memory for Javascript programs. If you ever struggle, just use tools/transfer.py --help .","title":"Uploading JS code"},{"location":"development/uploading-js-code/#uploading-a-program","text":"To upload a program invoke: tools/transfer.py sync --dir directoryWithTheProgram The tool should finish. Note that if you have concurrently opened idf.py monitor the procedure fails.","title":"Uploading a program"},{"location":"development/uploading-js-code/#transpiling-programs","text":"If you would like to test the programs that use the await and async keywords, you have to transpile the program. This is best done using regenerator . Usually you will invoke it as npx regenerator sourceDirectory buildDirectory . I will skip the installation procedure as soon it will not be needed and the power users don't need instructions :-P.","title":"Transpiling programs"}]}